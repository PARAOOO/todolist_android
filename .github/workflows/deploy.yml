name: Deploy to Google Play

on:
  pull_request:
    types:
      - closed  # PR이 close 될 때만 트리거
    branches:
      - production  # production 브랜치에 푸시될 때 배포를 트리거

jobs:
  deploy:
    if: ${{ github.event.pull_request.merged == true }} # PR이 머지된 경우에만 실행되도록 조건 추가

    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get PR details
        id: pr_details
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "PR Title: $PR_TITLE"
          echo "PR Body: $PR_BODY"
          
          # PR 본문에서 릴리즈 노트 추출하는 코드 (예시)
          RELEASE_NOTES=$(echo "$PR_BODY" | grep -oP '(?<=## 패치 노트)[\s\S]*?(?=___|##|$)' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          
          # Release Notes 출력
          echo "Release Notes: '$RELEASE_NOTES'"
          
#          mkdir -p ./fastlane/metadata/android/ko/changelogs
#          echo "$RELEASE_NOTES" > ./fastlane/metadata/android/ko/changelogs/default.txt

    #          # Output 변수로 저장
#          echo "::set-output name=release_notes::$RELEASE_NOTES"

      # 2. JDK 설정 (필요한 Java 버전 지정)
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # 사용하는 Java 버전
          distribution: 'temurin'  # JDK 배포판 (예: 'adoptopenjdk', 'zulu', 'temurin')

      # 2.5 Keystore 디코딩
      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > todolist_keystore.jks
        

      # 3. Gradle 의존성 캐시
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4. Gradle로 AAB 파일 빌드
      - name: Build AAB
        run: ./gradlew clean bundleRelease
        env:
          KEYSTORE_FILE: ../todolist_keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 5. Fastlane 설치
      - name: Install Fastlane
        run: |
          sudo gem install fastlane -NV

      # 6. Fastlane 배포 실행
      - name: Run Fastlane deploy
        run: fastlane deploy
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}  # GitHub Secrets에 저장한 Google Play JSON 키
          KEYSTORE_FILE: ../todolist_keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          RELEASE_NOTES: ${{ steps.pr_details.outputs.release_notes }}
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # GitHub Secrets에 저장한 Slack Webhook URL
